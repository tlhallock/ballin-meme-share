
CREATE TABLE IF NOT EXISTS  MACHINE (
   M_ID INTEGER PRIMARY KEY     AUTO_INCREMENT,
   MNAME          varchar(50)   NOT NULL,
   IP             varchar(256)   NOT NULL,
   PORT           INT,
   NPORTS         INT           NOT NULL DEFAULT  1,
   LAST_ACTIVE    LONG,
   SHARING        INTEGER       NOT NULL  DEFAULT TRUE,
   SHARES_WITH_US INTEGER,
   IDENT          varchar(50)   NOT NULL,
   IS_LOCAL       BOOLEAN       NOT NULL  DEFAULT 0,
   MESSAGES       BOOLEAN       NOT NULL  DEFAULT TRUE,
   ACCEPT_PEERS   BOOLEAN                 DEFAULT FALSE,
   PIN            BOOLEAN       NOT NULL  DEFAULT FALSE,
);

CREATE UNIQUE      INDEX IF NOT EXISTS MACHINE_INDEX_UNIQUE_ADDRESS    ON MACHINE(IP, PORT);
CREATE UNIQUE HASH INDEX IF NOT EXISTS MACHINE_INDEX_UNIQUE_IDENTIFIER ON MACHINE(IDENT);
CREATE             INDEX IF NOT EXISTS MACHINE_INDEX_FAST_FIND         ON MACHINE(M_ID);











CREATE TABLE IF NOT EXISTS  PUBLIC_KEY (
   K_ID INTEGER PRIMARY KEY     AUTO_INCREMENT,
   KEYSTR         char(280)     NOT NULL,
   ADDED          LONG          NOT NULL,
   EXPIRES        LONG,
   MID            INT,

   FOREIGN KEY(MID) REFERENCES MACHINE(M_ID) ON DELETE CASCADE,
);
CREATE UNIQUE      INDEX IF NOT EXISTS PUBLIC_KEY_INDEX_UNIQUE_KEY ON PUBLIC_KEY(KEYSTR, MID);
CREATE             INDEX IF NOT EXISTS PUBLIC_KEY_INDEX_FAST_FIND  ON PUBLIC_KEY(MID);










CREATE TABLE IF NOT EXISTS  PELEM (
   P_ID           LONG          PRIMARY KEY   AUTO_INCREMENT,
   BROKEN         BOOLEAN       NOT NULL,
   PELEM          varchar(20)   NOT NULL,
);
CREATE        HASH INDEX IF NOT EXISTS PELEM_INDEX_FAST_FIND_BY_VALUE ON PELEM(PELEM);
CREATE             INDEX IF NOT EXISTS PELEM_INDEX_FAST_FIND_BY_ID    ON PELEM(P_ID);
CREATE UNIQUE      INDEX IF NOT EXISTS PELEM_INDEX_UNIQUE             ON PELEM(P_ID, BROKEN, PELEM);

MERGE INTO PELEM KEY(P_ID) VALUES (0, false, '/');














-- Broke this off into its own table to save headaches.;
CREATE TABLE IF NOT EXISTS  ROOT_PATH (
   RP_ID          INTEGER        PRIMARY KEY   AUTO_INCREMENT,
   PREV           INTEGER        ,
   VALUE          varchar(256)   ,
);

MERGE INTO ROOT_PATH KEY(RP_ID) VALUES (0, 0, '/');
ALTER TABLE ROOT_PATH ADD FOREIGN KEY(PREV) REFERENCES ROOT_PATH  (RP_ID) ON DELETE CASCADE;
CREATE             INDEX IF NOT EXISTS ROOT_PATH_INDEX_FAST_SEARCH    ON ROOT_PATH(PREV);
CREATE UNIQUE      INDEX IF NOT EXISTS ROOT_PATH_INDEX_ONLY_ROOT_PATH ON ROOT_PATH(VALUE, PREV);











CREATE TABLE IF NOT EXISTS  ROOT (
   R_ID           INTEGER PRIMARY KEY   AUTO_INCREMENT,
   PATH           INTEGER     NOT NULL,
   TAGS           varchar( 64),
   DESCR          varchar(256),
   MID            INTEGER     NOT NULL,
   TYPE           INTEGER     NOT NULL,
   TSPACE         LONG,
   NFILES         LONG,
   RNAME          char(256)   NOT NULL,
   SHARING        INTEGER     NOT NULL,
   MIN_SIZE       LONG        NOT NULL DEFAULT -1,
   MAX_SIZE       LONG        NOT NULL DEFAULT -1,
   PERM_FLAGS     INTEGER     NOT NULL DEFAULT 0,
   
   FOREIGN KEY(MID ) REFERENCES MACHINE  (M_ID )  ON DELETE CASCADE,
   FOREIGN KEY(PATH) REFERENCES ROOT_PATH(RP_ID),
);

CREATE UNIQUE      INDEX IF NOT EXISTS ROOT_INDEX_ONLY_PATH_ON_MACHINE      ON ROOT(PATH,  MID);
CREATE UNIQUE      INDEX IF NOT EXISTS ROOT_INDEX_ONLY_NAME_ON_MACHINE      ON ROOT(RNAME, MID);
CREATE             INDEX IF NOT EXISTS ROOT_INDEX_FAST_FIND_BY_NAME         ON ROOT(MID);
CREATE             INDEX IF NOT EXISTS ROOT_INDEX_FAST_FIND_BY_MACHINE      ON ROOT(RNAME);











CREATE TABLE IF NOT EXISTS ROOT_CONTAINS (
   RC_ID          LONG      PRIMARY KEY    AUTO_INCREMENT,
   RID            INTEGER   ,
   PELEM          LONG      NOT NULL,
   PARENT         LONG      NOT NULL,

   FOREIGN KEY(PELEM)  REFERENCES PELEM(P_ID)  ON DELETE CASCADE,
   FOREIGN KEY(RID)    REFERENCES ROOT (R_ID)  ON DELETE CASCADE,
);

MERGE INTO ROOT_CONTAINS KEY(RC_ID) VALUES (0, NULL, 0, 0);
ALTER TABLE ROOT_CONTAINS ADD FOREIGN KEY(PARENT) REFERENCES ROOT_CONTAINS(RC_ID)  ON DELETE CASCADE;

CREATE             INDEX IF NOT EXISTS ROOT_CONTAINS_INDEX_FAST_FIND    ON ROOT_CONTAINS(PELEM);
CREATE             INDEX IF NOT EXISTS ROOT_CONTAINS_INDEX_FAST_LIST    ON ROOT_CONTAINS(PARENT);
CREATE             INDEX IF NOT EXISTS ROOT_CONTAINS_INDEX_FAST_DEBUG   ON ROOT_CONTAINS(RID);
CREATE UNIQUE      INDEX IF NOT EXISTS ROOT_CONTAINS_INDEX_UNIQUE_PATH  ON ROOT_CONTAINS(PELEM, RID, PARENT);















CREATE TABLE IF NOT EXISTS IGNORE_PATTERN (
   I_ID           INTEGER         PRIMARY KEY    AUTO_INCREMENT,
   RID            INT             NOT NULL,
   PATTERN        varchar(1024)   NOT NULL,
   
   FOREIGN KEY(RID) REFERENCES ROOT(R_ID)     ON DELETE CASCADE,
);

CREATE UNIQUE      INDEX IF NOT EXISTS IGNORE_INDEX_UNIQUE_IGNORE ON IGNORE_PATTERN(RID, PATTERN);
CREATE             INDEX IF NOT EXISTS IGNORE_INDEX_FAST_SEARCH ON IGNORE_PATTERN(RID);



















CREATE TABLE IF NOT EXISTS SFILE (
   F_ID           INTEGER       PRIMARY KEY     AUTO_INCREMENT,
   FSIZE          LONG          NOT NULL,
   TAGS           varchar(256),
   CHKSUM         char(40),
   PATH           LONG          NOT NULL,
   ROOT           INTEGER       NOT NULL,
   RSTATE         INTEGER       NOT NULL DEFAULT 0,
   MODIFIED       LONG,
   ERROR          INTEGER       DEFAULT 0,
   IS_LOCAL       BOOLEAN       NOT NULL,
   
   FOREIGN KEY(PATH) REFERENCES ROOT_CONTAINS(RC_ID)  ON DELETE CASCADE,
   FOREIGN KEY(ROOT) REFERENCES          ROOT(R_ID )  ON DELETE CASCADE,
);
CREATE UNIQUE      INDEX IF NOT EXISTS SFILE_INDEX_UNIE_FILE            ON SFILE(PATH, ROOT);
CREATE             INDEX IF NOT EXISTS SFILE_INDEX_FAST_SEARCH_CHKSUM   ON SFILE(CHKSUM);
CREATE             INDEX IF NOT EXISTS SFILE_INDEX_FAST_SEARCH_FILESIZE ON SFILE(FSIZE);
CREATE             INDEX IF NOT EXISTS SFILE_INDEX_FAST_DELETE          ON SFILE(PATH);















CREATE TABLE IF NOT EXISTS CHK_REQ (
   FID            INTEGER       NOT NULL,
   
   FOREIGN KEY(FID) REFERENCES SFILE(F_ID) ON DELETE CASCADE,
);
CREATE UNIQUE      INDEX IF NOT EXISTS CRU ON CHK_REQ(FID);

















CREATE TABLE IF NOT EXISTS DOWNLOAD (
   Q_ID           INTEGER PRIMARY KEY    AUTO_INCREMENT,
   FID            INTEGER NOT NULL,
   ADDED          LONG    NOT NULL,
   DSTATE         INTEGER,
   PRIORITY       INTEGER,
   DEST_FILE      VARCHAR,
   CHUNK_SIZE     LONG    NOT NULL,
   
   FOREIGN KEY(FID) REFERENCES SFILE(F_ID)  ON DELETE CASCADE,
);
CREATE UNIQUE      INDEX IF NOT EXISTS DU ON DOWNLOAD(FID);


















CREATE TABLE IF NOT EXISTS MESSAGE (
   M_ID           INTEGER       PRIMARY KEY    AUTO_INCREMENT,
   MID            INTEGER       NOT NULL,
   SENT           LONG          NOT NULL,
   MTYPE          INTEGER       NOT NULL,
   MESSAGE        varchar(1024) NOT NULL,
   
   FOREIGN KEY(MID) REFERENCES MACHINE(M_ID)  ON DELETE CASCADE
);
















CREATE TABLE IF NOT EXISTS SHARE_ROOT (
   RID             INTEGER NOT NULL,
   MID             INTEGER NOT NULL,
   IS_SHARING      INTEGER NOT NULL,

   FOREIGN KEY(MID) REFERENCES MACHINE(M_ID)  ON DELETE CASCADE,
   FOREIGN KEY(RID) REFERENCES ROOT   (R_ID)  ON DELETE CASCADE,
   PRIMARY KEY(RID, MID)
);
















CREATE TABLE IF NOT EXISTS CHUNK (
   C_ID            INTEGER     PRIMARY KEY AUTO_INCREMENT,
   DID             INTEGER     NOT NULL,
   BEGIN_OFFSET    LONG        NOT NULL,
   END_OFFSET      LONG        NOT NULL,
   CHECKSUM        varchar(40) NOT NULL,
   DOWNLOAD_STATE  INTEGER     NOT NULL,

   FOREIGN KEY(DID) REFERENCES DOWNLOAD(Q_ID)  ON DELETE CASCADE,
);
CREATE UNIQUE      INDEX IF NOT EXISTS CU ON CHUNK(DID, BEGIN_OFFSET, END_OFFSET);

